name: CI/CD Pipeline

# Definir los eventos que activan el flujo de trabajo
on:
  push:
    branches:
      - main   # Ejecutar en cada 'push' a la rama 'main'
  pull_request:
    branches:
      - main   # Ejecutar también en 'pull requests' hacia la rama 'main'

jobs:
  # Job de pruebas (Ejecutar tests de la aplicación)
  test:
    runs-on: ubuntu-latest    # Utiliza una máquina virtual Ubuntu para ejecutar este job
    services:
      mongodb:
        image: mongo:latest  # Ejecutar un contenedor de MongoDB para las pruebas
        ports:
          - 27017:27017     # Exponer el puerto de MongoDB
        options: --health-cmd="mongo --eval 'db.adminCommand(\"ping\")' --quiet"  # Asegurarse de que MongoDB esté listo

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2  # Obtener el código del repositorio

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'  # Instalar Python 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Actualizar pip
          pip install -r requirements.txt   # Instalar las dependencias de Python

      - name: Run tests
        run: |
          pytest tests/  # Ejecutar los tests con pytest (si tienes tests en la carpeta 'tests')

  # Job para construir y subir la imagen Docker
  build_and_push_docker_image:
    needs: test  # Este job depende de que 'test' haya sido exitoso
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Credenciales de Docker (Guardadas en Secrets)
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t my-flask-app .  # Construir la imagen con el Dockerfile en la raíz

      - name: Push Docker image to Docker Hub
        run: |
          docker push my-flask-app  # Subir la imagen a Docker Hub

  # Job para desplegar la infraestructura con Terraform (opcional)
  terraform:
    needs: build_and_push_docker_image  # Este job depende de que 'build_and_push_docker_image' haya sido exitoso
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1  # Instalar Terraform

      - name: Initialize Terraform
        run: terraform init  # Inicializar la configuración de Terraform

      - name: Terraform Plan
        run: terraform plan  # Ver qué cambios va a hacer Terraform

      - name: Apply Terraform
        run: terraform apply -auto-approve  # Aplicar los cambios sin necesidad de confirmación