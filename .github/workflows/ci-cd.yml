name: CI/CD Pipeline

# Definir los eventos que activan el flujo de trabajo
on:
  push:
    branches:
      - main   # Ejecutar en cada 'push' a la rama 'main'
  pull_request:
    branches:
      - main   # Ejecutar también en 'pull requests' hacia la rama 'main'

jobs:
  # Job de pruebas (Ahora solo verifica dependencias y conexión a MongoDB)
  test:
    runs-on: ubuntu-latest    # Utiliza una máquina virtual Ubuntu para ejecutar este job
    services:
      mongodb:
        image: mongo:5.0   # Cambiar la versión para usar una más estable
        ports:
          - 27017:27017     # Exponer el puerto de MongoDB
        options: --health-cmd="mongo --eval 'db.adminCommand(\"ping\")' --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2   # Obtener el código del repositorio

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'   # Instalar Python 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip   # Actualizar pip
          cd python-flask-mongodb-crud-task/ # Navega al directorio de la aplicación para instalar dependencias
          pip install -r requirements.txt   # Instalar las dependencias de Python

      - name: Increase vm.max_map_count
        run: sudo sysctl -w vm.max_map_count=16777220   # Ajustar parámetro de memoria

      - name: Test MongoDB connection
        run: |
          until nc -zv 127.0.0.1 27017; do
            echo "Waiting for MongoDB to start..."
            sleep 5
          done
          echo "MongoDB is ready!"

      # El paso 'Run tests' ha sido ELIMINADO para la máxima simplicidad,
      # ya que no tienes una carpeta 'tests/'.
      # Si en el futuro añades tests, deberás reintroducir este paso.

  # Job para construir y subir la imagen Docker
  build_and_push_docker_image:
    # Este job ahora solo necesita que el job 'test' haya terminado (sin errores)
    # El job 'test' ahora solo verifica la instalación de dependencias y la conexión a MongoDB.
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}   # Credenciales de Docker (Guardadas en Secrets)
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd python-flask-mongodb-crud-task/ # Navega al directorio donde está el Dockerfile
          docker build -t my-flask-app .   # Construir la imagen con el Dockerfile en la raíz

      - name: Push Docker image to Docker Hub
        run: |
          docker push my-flask-app   # Subir la imagen a Docker Hub

  # Job para desplegar la infraestructura con Terraform (opcional)
  terraform:
    needs: build_and_push_docker_image
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: |
          cd python-flask-mongodb-crud-task/mi-atlas-terraform/ # Navega al directorio de Terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd python-flask-mongodb-crud-task/mi-atlas-terraform/ # Navega al directorio de Terraform
          terraform plan

      - name: Apply Terraform
        env:
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY }}
        run: |
          cd python-flask-mongodb-crud-task/mi-atlas-terraform/ # Navega al directorio de Terraform
          terraform apply -auto-approve
